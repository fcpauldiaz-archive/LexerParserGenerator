-------SLR---------
Alfabeto [op, res, stmtSeq, mul, lt, sum, program, simpleExp, eq, cp, div, number, pc, term, id, assign_op, exp, factor, stmt, assign_stmt]
Estado inicial [program' => •program $ , assign_stmt => •id assign_op exp , program => •stmtSeq , stmtSeq => •stmtSeq pc stmt , stmt => •assign_stmt , stmtSeq => •stmt ]
Conjutos de estados de aceptacion []
Conjunto de Estados [[program' => •program $ , assign_stmt => •id assign_op exp , program => •stmtSeq , stmtSeq => •stmtSeq pc stmt , stmt => •assign_stmt , stmtSeq => •stmt ], [stmtSeq => stmtSeq •pc stmt , program => stmtSeq ], [program' => program •$ ], [assign_stmt => id •assign_op exp ], [stmtSeq => stmt ], [stmt => assign_stmt ], [assign_stmt => id assign_op •exp , term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ], [term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ], [simpleExp => simpleExp •res term , simpleExp => simpleExp •sum term , exp => simpleExp , exp => simpleExp •lt simpleExp , exp => simpleExp •eq simpleExp ], [factor => number ], [term => term •div factor , simpleExp => term , term => term •mul factor ], [factor => id ], [assign_stmt => id assign_op exp ], [term => factor ], [factor => •number , term => term div •factor , factor => •id , factor => •op exp cp ], [factor => •number , factor => •id , factor => •op exp cp , term => term mul •factor ], [term => term mul factor ], [term => term div factor ], [factor => •number , simpleExp => simpleExp res •term , term => •term div factor , factor => •id , term => •factor , term => •term mul factor , factor => •op exp cp ], [factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , exp => simpleExp lt •simpleExp , term => •term mul factor , factor => •op exp cp ], [factor => •number , term => •term div factor , factor => •id , term => •factor , simpleExp => simpleExp sum •term , term => •term mul factor , factor => •op exp cp ], [factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , term => •term mul factor , exp => simpleExp eq •simpleExp , factor => •op exp cp ], [exp => simpleExp eq simpleExp , simpleExp => simpleExp •res term , simpleExp => simpleExp •sum term ], [term => term •div factor , simpleExp => simpleExp sum term , term => term •mul factor ], [simpleExp => simpleExp •res term , exp => simpleExp lt simpleExp , simpleExp => simpleExp •sum term ], [simpleExp => simpleExp res term , term => term •div factor , term => term •mul factor ], [factor => op exp •cp ], [factor => op exp cp ], [stmtSeq => stmtSeq pc •stmt , assign_stmt => •id assign_op exp , stmt => •assign_stmt ], [stmtSeq => stmtSeq pc stmt ]]
Conjunto de transiciones: 
([program' => •program $ , assign_stmt => •id assign_op exp , program => •stmtSeq , stmtSeq => •stmtSeq pc stmt , stmt => •assign_stmt , stmtSeq => •stmt ]-stmtSeq-[stmtSeq => stmtSeq •pc stmt , program => stmtSeq ])
([program' => •program $ , assign_stmt => •id assign_op exp , program => •stmtSeq , stmtSeq => •stmtSeq pc stmt , stmt => •assign_stmt , stmtSeq => •stmt ]-program-[program' => program •$ ])
([program' => •program $ , assign_stmt => •id assign_op exp , program => •stmtSeq , stmtSeq => •stmtSeq pc stmt , stmt => •assign_stmt , stmtSeq => •stmt ]-id-[assign_stmt => id •assign_op exp ])
([program' => •program $ , assign_stmt => •id assign_op exp , program => •stmtSeq , stmtSeq => •stmtSeq pc stmt , stmt => •assign_stmt , stmtSeq => •stmt ]-stmt-[stmtSeq => stmt ])
([program' => •program $ , assign_stmt => •id assign_op exp , program => •stmtSeq , stmtSeq => •stmtSeq pc stmt , stmt => •assign_stmt , stmtSeq => •stmt ]-assign_stmt-[stmt => assign_stmt ])
([stmtSeq => stmtSeq •pc stmt , program => stmtSeq ]-pc-[stmtSeq => stmtSeq pc •stmt , assign_stmt => •id assign_op exp , stmt => •assign_stmt ])
([assign_stmt => id •assign_op exp ]-assign_op-[assign_stmt => id assign_op •exp , term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ])
([assign_stmt => id assign_op •exp , term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ]-op-[term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ])
([assign_stmt => id assign_op •exp , term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ]-simpleExp-[simpleExp => simpleExp •res term , simpleExp => simpleExp •sum term , exp => simpleExp , exp => simpleExp •lt simpleExp , exp => simpleExp •eq simpleExp ])
([assign_stmt => id assign_op •exp , term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ]-number-[factor => number ])
([assign_stmt => id assign_op •exp , term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ]-term-[term => term •div factor , simpleExp => term , term => term •mul factor ])
([assign_stmt => id assign_op •exp , term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ]-id-[factor => id ])
([assign_stmt => id assign_op •exp , term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ]-exp-[assign_stmt => id assign_op exp ])
([assign_stmt => id assign_op •exp , term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ]-factor-[term => factor ])
([term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ]-op-[term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ])
([term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ]-simpleExp-[simpleExp => simpleExp •res term , simpleExp => simpleExp •sum term , exp => simpleExp , exp => simpleExp •lt simpleExp , exp => simpleExp •eq simpleExp ])
([term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ]-number-[factor => number ])
([term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ]-term-[term => term •div factor , simpleExp => term , term => term •mul factor ])
([term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ]-id-[factor => id ])
([term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ]-factor-[term => factor ])
([term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ]-exp-[factor => op exp •cp ])
([simpleExp => simpleExp •res term , simpleExp => simpleExp •sum term , exp => simpleExp , exp => simpleExp •lt simpleExp , exp => simpleExp •eq simpleExp ]-res-[factor => •number , simpleExp => simpleExp res •term , term => •term div factor , factor => •id , term => •factor , term => •term mul factor , factor => •op exp cp ])
([simpleExp => simpleExp •res term , simpleExp => simpleExp •sum term , exp => simpleExp , exp => simpleExp •lt simpleExp , exp => simpleExp •eq simpleExp ]-lt-[factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , exp => simpleExp lt •simpleExp , term => •term mul factor , factor => •op exp cp ])
([simpleExp => simpleExp •res term , simpleExp => simpleExp •sum term , exp => simpleExp , exp => simpleExp •lt simpleExp , exp => simpleExp •eq simpleExp ]-sum-[factor => •number , term => •term div factor , factor => •id , term => •factor , simpleExp => simpleExp sum •term , term => •term mul factor , factor => •op exp cp ])
([simpleExp => simpleExp •res term , simpleExp => simpleExp •sum term , exp => simpleExp , exp => simpleExp •lt simpleExp , exp => simpleExp •eq simpleExp ]-eq-[factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , term => •term mul factor , exp => simpleExp eq •simpleExp , factor => •op exp cp ])
([term => term •div factor , simpleExp => term , term => term •mul factor ]-div-[factor => •number , term => term div •factor , factor => •id , factor => •op exp cp ])
([term => term •div factor , simpleExp => term , term => term •mul factor ]-mul-[factor => •number , factor => •id , factor => •op exp cp , term => term mul •factor ])
([factor => •number , term => term div •factor , factor => •id , factor => •op exp cp ]-number-[factor => number ])
([factor => •number , term => term div •factor , factor => •id , factor => •op exp cp ]-op-[term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ])
([factor => •number , term => term div •factor , factor => •id , factor => •op exp cp ]-id-[factor => id ])
([factor => •number , term => term div •factor , factor => •id , factor => •op exp cp ]-factor-[term => term div factor ])
([factor => •number , factor => •id , factor => •op exp cp , term => term mul •factor ]-number-[factor => number ])
([factor => •number , factor => •id , factor => •op exp cp , term => term mul •factor ]-op-[term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ])
([factor => •number , factor => •id , factor => •op exp cp , term => term mul •factor ]-id-[factor => id ])
([factor => •number , factor => •id , factor => •op exp cp , term => term mul •factor ]-factor-[term => term mul factor ])
([factor => •number , simpleExp => simpleExp res •term , term => •term div factor , factor => •id , term => •factor , term => •term mul factor , factor => •op exp cp ]-number-[factor => number ])
([factor => •number , simpleExp => simpleExp res •term , term => •term div factor , factor => •id , term => •factor , term => •term mul factor , factor => •op exp cp ]-op-[term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ])
([factor => •number , simpleExp => simpleExp res •term , term => •term div factor , factor => •id , term => •factor , term => •term mul factor , factor => •op exp cp ]-term-[simpleExp => simpleExp res term , term => term •div factor , term => term •mul factor ])
([factor => •number , simpleExp => simpleExp res •term , term => •term div factor , factor => •id , term => •factor , term => •term mul factor , factor => •op exp cp ]-id-[factor => id ])
([factor => •number , simpleExp => simpleExp res •term , term => •term div factor , factor => •id , term => •factor , term => •term mul factor , factor => •op exp cp ]-factor-[term => factor ])
([factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , exp => simpleExp lt •simpleExp , term => •term mul factor , factor => •op exp cp ]-op-[term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ])
([factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , exp => simpleExp lt •simpleExp , term => •term mul factor , factor => •op exp cp ]-simpleExp-[simpleExp => simpleExp •res term , exp => simpleExp lt simpleExp , simpleExp => simpleExp •sum term ])
([factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , exp => simpleExp lt •simpleExp , term => •term mul factor , factor => •op exp cp ]-number-[factor => number ])
([factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , exp => simpleExp lt •simpleExp , term => •term mul factor , factor => •op exp cp ]-term-[term => term •div factor , simpleExp => term , term => term •mul factor ])
([factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , exp => simpleExp lt •simpleExp , term => •term mul factor , factor => •op exp cp ]-id-[factor => id ])
([factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , exp => simpleExp lt •simpleExp , term => •term mul factor , factor => •op exp cp ]-factor-[term => factor ])
([factor => •number , term => •term div factor , factor => •id , term => •factor , simpleExp => simpleExp sum •term , term => •term mul factor , factor => •op exp cp ]-number-[factor => number ])
([factor => •number , term => •term div factor , factor => •id , term => •factor , simpleExp => simpleExp sum •term , term => •term mul factor , factor => •op exp cp ]-op-[term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ])
([factor => •number , term => •term div factor , factor => •id , term => •factor , simpleExp => simpleExp sum •term , term => •term mul factor , factor => •op exp cp ]-term-[term => term •div factor , simpleExp => simpleExp sum term , term => term •mul factor ])
([factor => •number , term => •term div factor , factor => •id , term => •factor , simpleExp => simpleExp sum •term , term => •term mul factor , factor => •op exp cp ]-id-[factor => id ])
([factor => •number , term => •term div factor , factor => •id , term => •factor , simpleExp => simpleExp sum •term , term => •term mul factor , factor => •op exp cp ]-factor-[term => factor ])
([factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , term => •term mul factor , exp => simpleExp eq •simpleExp , factor => •op exp cp ]-op-[term => •term div factor , simpleExp => •term , factor => •op exp cp , factor => op •exp cp , factor => •number , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , term => •factor , exp => •simpleExp eq simpleExp , term => •term mul factor , exp => •simpleExp , exp => •simpleExp lt simpleExp ])
([factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , term => •term mul factor , exp => simpleExp eq •simpleExp , factor => •op exp cp ]-simpleExp-[exp => simpleExp eq simpleExp , simpleExp => simpleExp •res term , simpleExp => simpleExp •sum term ])
([factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , term => •term mul factor , exp => simpleExp eq •simpleExp , factor => •op exp cp ]-number-[factor => number ])
([factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , term => •term mul factor , exp => simpleExp eq •simpleExp , factor => •op exp cp ]-term-[term => term •div factor , simpleExp => term , term => term •mul factor ])
([factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , term => •term mul factor , exp => simpleExp eq •simpleExp , factor => •op exp cp ]-id-[factor => id ])
([factor => •number , term => •term div factor , simpleExp => •simpleExp sum term , simpleExp => •simpleExp res term , factor => •id , simpleExp => •term , term => •factor , term => •term mul factor , exp => simpleExp eq •simpleExp , factor => •op exp cp ]-factor-[term => factor ])
([exp => simpleExp eq simpleExp , simpleExp => simpleExp •res term , simpleExp => simpleExp •sum term ]-res-[factor => •number , simpleExp => simpleExp res •term , term => •term div factor , factor => •id , term => •factor , term => •term mul factor , factor => •op exp cp ])
([exp => simpleExp eq simpleExp , simpleExp => simpleExp •res term , simpleExp => simpleExp •sum term ]-sum-[factor => •number , term => •term div factor , factor => •id , term => •factor , simpleExp => simpleExp sum •term , term => •term mul factor , factor => •op exp cp ])
([term => term •div factor , simpleExp => simpleExp sum term , term => term •mul factor ]-div-[factor => •number , term => term div •factor , factor => •id , factor => •op exp cp ])
([term => term •div factor , simpleExp => simpleExp sum term , term => term •mul factor ]-mul-[factor => •number , factor => •id , factor => •op exp cp , term => term mul •factor ])
([simpleExp => simpleExp •res term , exp => simpleExp lt simpleExp , simpleExp => simpleExp •sum term ]-res-[factor => •number , simpleExp => simpleExp res •term , term => •term div factor , factor => •id , term => •factor , term => •term mul factor , factor => •op exp cp ])
([simpleExp => simpleExp •res term , exp => simpleExp lt simpleExp , simpleExp => simpleExp •sum term ]-sum-[factor => •number , term => •term div factor , factor => •id , term => •factor , simpleExp => simpleExp sum •term , term => •term mul factor , factor => •op exp cp ])
([simpleExp => simpleExp res term , term => term •div factor , term => term •mul factor ]-div-[factor => •number , term => term div •factor , factor => •id , factor => •op exp cp ])
([simpleExp => simpleExp res term , term => term •div factor , term => term •mul factor ]-mul-[factor => •number , factor => •id , factor => •op exp cp , term => term mul •factor ])
([factor => op exp •cp ]-cp-[factor => op exp cp ])
([stmtSeq => stmtSeq pc •stmt , assign_stmt => •id assign_op exp , stmt => •assign_stmt ]-id-[assign_stmt => id •assign_op exp ])
([stmtSeq => stmtSeq pc •stmt , assign_stmt => •id assign_op exp , stmt => •assign_stmt ]-stmt-[stmtSeq => stmtSeq pc stmt ])
([stmtSeq => stmtSeq pc •stmt , assign_stmt => •id assign_op exp , stmt => •assign_stmt ]-assign_stmt-[stmt => assign_stmt ])

Lenguaje r: null
Cadena w ingresada: null
Resultado: null

Tiempo Creación: 0.0 ns
Tiempo Simulacion: 0.0 ns
